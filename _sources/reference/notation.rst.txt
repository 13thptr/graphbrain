============================
Semantic Hypergraph Notation
============================

Atom structure
==============

.. image:: /_static/atom-structure.png
    :align: center
    :alt: atom structure


Hyperedge types
===============

+------+---------------+------------------------------+--------------------------------+
| Code | Type          | Purpose                      | Example                        |
+======+===============+==============================+================================+
+ **Atomic or non-atomic**                                                             +
+------+---------------+------------------------------+--------------------------------+
| c    | concept       | Define atomic concepts       | **apple/c**                    |
+------+---------------+------------------------------+--------------------------------+
| p    | predicate     | Build relations              | (**is/p** berlin/c nice/c)     |
+------+---------------+------------------------------+--------------------------------+
| m    | modifier      | Modify a concept             | (**red/m** shoes/c)            |
+------+---------------+------------------------------+--------------------------------+
+ **Atomic only**                                                                      +
+------+---------------+------------------------------+--------------------------------+
| a    | auxiliary     | Modify a predicate           | (**not/a** is/p)               |
+------+---------------+------------------------------+--------------------------------+
| b    | builder       | Build concepts from concepts | (**of/b** capital/c germany/c) |
+------+---------------+------------------------------+--------------------------------+
| w    | meta-modifier | Modify a modifier            | (**very/w** large/m)           |
+------+---------------+------------------------------+--------------------------------+
| x    | subpredicate  | Auxiliary predicate          | (**by/x** john/c)              |
+------+---------------+------------------------------+--------------------------------+
| t    | trigger       | Build specifications         | (**in/t** 1994/c)              |
+------+---------------+------------------------------+--------------------------------+
+ **Non-atomic only**                                                                  +
+------+---------------+------------------------------+--------------------------------+
| r    | relation      | Express facts, statements,   | **(is/p berlin/c nice/c)**     |
+      +               +                              +                                +
|      |               | questions, orders, ...       |                                |
+------+---------------+------------------------------+--------------------------------+
| d    | dependent     | Relation argument            | **(by/x scientists/c)**        |
+------+---------------+------------------------------+--------------------------------+
| s    | specifier     | Relation specification       | **(in/t 1976/c)**              |
+      +               +                              +                                +
|      |               | (e.g. condition, time, ...)  |                                |
+------+---------------+------------------------------+--------------------------------+


Type inference rules
====================

+---------------+----------------+
| Element types | Resulting type |
+===============+================+
| (m  c)        | c              |
+---------------+----------------+
| (b  c  c+)    | c              |
+---------------+----------------+
| (w  m)        | m              |
+---------------+----------------+
| (a  p)        | p              |
+---------------+----------------+
| (p  [crds]+)  | r              |
+---------------+----------------+
| (x  [cr]+)    | d              |
+---------------+----------------+
| (t  [cr]+)    | s              |
+---------------+----------------+

We use the notation of regular expressions: the symbol ``+`` is used to denote an arbitrary number of entities with the type that precedes it, while square brackets indicate several possibilities (for instance, ``[cr]+`` means "at least one of any of both ``c`` or ``r`` types).


Subtypes
========

Concept
-------

+------+---------------+----------+
| Code | Subtype       | Example  |
+======+===============+==========+
| cc   | common        | apple/cc |
+------+---------------+----------+
| cp   | proper        | mary/cp  |
+------+---------------+----------+
| cn   | number        | 27/cn    |
+------+---------------+----------+
| ci   | pronoun       | she/ci   |
+------+---------------+----------+
| cw   | interrogative | who/cw   |
+------+---------------+----------+

Predicate
---------

+------+---------------+---------+
| Code | Subtype       | Example |
+======+===============+=========+
| pd   | declarative   | is/pd   |
+------+---------------+---------+
| p?   | interrogative | is/p?   |
+------+---------------+---------+
| p!   | imperative    | go/p!   |
+------+---------------+---------+
| pc   | conceptual    | go/pc   |
+------+---------------+---------+
| pm   | meta          | and/pm  |
+------+---------------+---------+

Builder
-------

+------+-------------+---------+
| Code | Subtype     | Example |
+======+=============+=========+
| bp   | possessive  | 's/bp   |
+------+-------------+---------+
| br   | relational  | in/br   |
+------+-------------+---------+
| b+   | enumerative | and/b+  |
+------+-------------+---------+

Auxiliary
---------

+------+----------+---------+
| Code | Subtype  | Example |
+======+==========+=========+
| an   | negation | not/an  |
+------+----------+---------+

Modifier
--------

+------+-------------+----------+
| Code | Subtype     | Example  |
+======+=============+==========+
| ma   | adjective   | green/ma |
+------+-------------+----------+
| mp   | possessive  | my/mp    |
+------+-------------+----------+
| md   | determinant | the/md   |
+------+-------------+----------+
| mn   | number      | 100/mn   |
+------+-------------+----------+

Trigger
-------

+------+-------------+-------------+
| Code | Subtype     | Example     |
+======+=============+=============+
| t?   | conditional | if/tc       |
+------+-------------+-------------+
| tt   | temporal    | when/tt     |
+------+-------------+-------------+
| tl   | local       | where/tl    |
+------+-------------+-------------+
| tm   | modal       | modal/tm    |
+------+-------------+-------------+
| t>   | causal      | because/t>  |
+------+-------------+-------------+
| t=   | comparative | like/t=     |
+------+-------------+-------------+
| tc   | concessive  | although/tc |
+------+-------------+-------------+


Type-specific additional information
====================================

TODO


Namespaces
==========

TODO