from .nlp import print_tree
from .parser_en import ParserEN
from .text import edge_text


def create_parser(name, lemmas=False, resolve_corefs=False, beta='repair',
                  normalize=True, post_process=True):
    """Creates and returns a parser (as an instanceof a subclass of Parser)
    for the language specified in the parameter. Throws exception if language
    is not implemented.

    Available parsers:
    'en' -- English

    Keyword argument:
    lemmas -- if True, lemma edges are generated by the parser.
    resolve_corefs -- if True, coreference resolution is performed.
    (default: False)
    beta -- beta stage mode, current options are 'strict' and 'repair'
    (default: 'repair')
    normalize -- perform hyperedge normalization (default: True)
    post_process -- perform hyperedge post-processing (default: True)
    """
    if name == 'en':
        return ParserEN(lemmas=lemmas, resolve_corefs=resolve_corefs,
                        beta=beta, normalize=normalize,
                        post_process=post_process)
    else:
        raise RuntimeError('Unknown parser: {}'.format(name))
